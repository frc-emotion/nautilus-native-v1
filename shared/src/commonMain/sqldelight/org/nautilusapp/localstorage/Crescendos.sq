import kotlin.Boolean;
import kotlin.Int;

CREATE TABLE crescendo_table (
    id TEXT PRIMARY KEY NOT NULL,
    competition TEXT NOT NULL,
    teamNumber INTEGER AS Int NOT NULL,
    teamName TEXT NOT NULL,
    matchNumber INTEGER AS Int NOT NULL,
    score INTEGER AS Int NOT NULL,
    penalty INTEGER AS Int NOT NULL,
    won INTEGER AS Boolean NOT NULL,
    tie INTEGER AS Boolean NOT NULL,
    comments TEXT NOT NULL,
    defensive INTEGER AS Boolean NOT NULL,
    brokeDown INTEGER AS Boolean NOT NULL,
    rankingPoints INTEGER AS Int NOT NULL,
    auto_leave INTEGER AS Boolean NOT NULL,
    auto_attempted INTEGER AS Int NOT NULL,
    auto_scored INTEGER AS Int NOT NULL,
    teleop_ampNotes INTEGER AS Int NOT NULL,
    teleop_speakerUnamped INTEGER AS Int NOT NULL,
    teleop_speakerAmped INTEGER AS Int NOT NULL,
    stageState TEXT NOT NULL,
    harmony INTEGER AS Int NOT NULL,
    trap INTEGER AS Boolean NOT NULL,
    melody INTEGER AS Boolean NOT NULL,
    ensemble INTEGER AS Boolean NOT NULL,
    created_by TEXT NOT NULL,
    rating REAL NOT NULL,
    defense_rating REAL NOT NULL,
    human_source INTEGER AS Boolean NOT NULL,
    coop INTEGER AS Boolean NOT NULL,
    human_skill REAL NOT NULL
);

insert {
-- BEGIN TRANSACTION;
DELETE FROM crescendo_table WHERE id = :id;
INSERT OR ROLLBACK INTO crescendo_table(id, competition, teamNumber, teamName, matchNumber, score, penalty, won, tie, comments, defensive, brokeDown, rankingPoints, auto_leave, auto_attempted, auto_scored, teleop_ampNotes, teleop_speakerUnamped, teleop_speakerAmped, stageState, harmony, trap, melody, ensemble, created_by, rating, defense_rating, human_source, coop, human_skill)
VALUES (:id, :competition, :teamNumber, :teamName, :matchNumber, :score, :penalty, :won, :tie, :comments, :defensive, :brokeDown, :rankingPoints, :autoLeave, :auto_attempted, :auto_scored, :teleopAmp, :teleopSpeakerUnamp, :teleopSpeakerAmp, :stageState, :harmony, :trap, :melody, :ensemble, :created_by, :rating, :defense_rating, :human_source, :coop, :human_skill);
-- COMMIT;
}

getAll:
SELECT * FROM crescendo_table;

getOne:
SELECT * FROM crescendo_table WHERE id = ? LIMIT 1;

deleteOne:
DELETE FROM crescendo_table WHERE id = ?;

deleteAll:
DELETE FROM crescendo_table;