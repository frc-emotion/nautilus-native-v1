import kotlin.Boolean;

CREATE TABLE meeting (
    id TEXT PRIMARY KEY NOT NULL,
    startTime INTEGER NOT NULL,
    endTime INTEGER NOT NULL,
    type TEXT NOT NULL,
    description TEXT NOT NULL,
    value INTEGER NOT NULL,
    createdBy TEXT NOT NULL,
    attendance_period TEXT,
    archived INTEGER AS Boolean DEFAULT 0
);

insertOne {
BEGIN TRANSACTION;
DELETE FROM meeting WHERE id = :id;
INSERT OR ROLLBACK INTO meeting (id, startTime, endTime, type, description, value, createdBy, attendance_period, archived)
VALUES (:id, :startTime, :endTime, :type, :description, :value, :createdBy, :attendance_period, :archived);
COMMIT;
}

removeAll:
DELETE FROM meeting;

removeOne:
DELETE FROM meeting WHERE id = ?;

getAllWithUsername:
SELECT meeting.*, username FROM meeting LEFT OUTER JOIN sqluser ON meeting.createdBy = sqluser.id;

getOneWithUsername:
SELECT meeting.*, username FROM meeting LEFT OUTER JOIN sqluser ON meeting.createdBy = sqluser.id WHERE meeting.id = ? LIMIT 1;

getCurrentWithUsername:
SELECT meeting.*, username FROM meeting LEFT OUTER JOIN sqluser ON meeting.createdBy = sqluser.id WHERE endTime >= :currentTime AND archived = 0 ORDER BY startTime DESC;

getOutdatedWithUsername:
SELECT meeting.*, username FROM meeting LEFT OUTER JOIN sqluser ON meeting.createdBy = sqluser.id WHERE endTime < :currentTime AND archived = 0 ORDER BY startTime DESC;

getArchivedWithUsername:
SELECT meeting.*, username FROM meeting LEFT OUTER JOIN sqluser ON meeting.createdBy = sqluser.id WHERE archived = 1 ORDER BY startTime DESC;